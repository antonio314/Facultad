/*	Grua 

	C.A.D. 						Curso 2008-2009
 	
	Codigo base para la realización de las practicas de CAD

	modulo mouse.c
	Gestion de eventos de raton
=======================================================
	J.C. Torres 
	Dpto. Lenguajes y Sistemas Informticos
	(Univ. de Granada, SPAIN)

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details 
 http://www.gnu.org/copyleft/gpl.html

=======================================================
Queda prohibido cobrar canon por la copia de este software

*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <GL/glut.h>                   // Libreria de utilidades de OpenGL
#include "helicoptero.h"
#define PI 3.141592
#define colorSeleccion 8
/**	int pick(x,y)

Procedimiento para seleccionar los componentes del modelo

Argumentos:

x: Coordenada x de la selección

y: Coordenada y de la selección

**/


/*
int pick(x,y){
  
  GLuint buff[512];
  GLint hits, up[4];
  
  glSelectBuffer(512,buff);
  glRenderMode(GL_SELECT);
  glInitNames();
  glPushName(-1);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glGetIntegerv(GL_VIEWPORT,up);
  gluPickMatrix(x,up[3]-y,5,5,up);
  fijaProyeccion();
  Dibuja();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  fijaProyeccion();
  hits = glRenderMode(GL_RENDER);
 
  seleccion.nObjetos=hits;

  int n=0,i=0, idCaja=-1; 
  
  if (hits!=0){
    printf("\nNumero de Objetos: %d\n", hits);
    printf("{ ");
    
    
    while(n<seleccion.nObjetos){
	  i++;
	  seleccion.objeto[n].zmin = (float)buff[i]/0xFFFFFFFF;
	  i++;
	  seleccion.objeto[n].zmax = (float)buff[i]/0xFFFFFFFF;
	  i++;
	  seleccion.objeto[n].nNames=buff[i];
	  i++; 
	  printf("\n El objeto con identificador %d ",seleccion.objeto[n].nNames);
	  printf("\n Su zmin es: %f ",seleccion.objeto[n].zmin);
	  printf("\n Su zmax es:  %f ",seleccion.objeto[n].zmax);
	  n++;
    }
    printf(" }\n");
    
    int b=0,k,z,zmin=-1;
    for(k= 0;k<hits;++k){
	if(buff[b] != 0){
	  z = buff[b+1];
	  if(zmin == -1 || z < zmin){
	    idCaja = buff[b+3];
	    zmin = z;
	  }
	}
	b+=buff[b]+3;
    }
    
    return idCaja;
    
  }
  
}

// Función para tratar las colisiones
void colisiones(int idCaja){
  int i;
  cajasuelo[idCaja].y = 0;
  for(i=0;i<numCaj;i++){
    if( i != idCaja &&  (sqrt((cajasuelo[idCaja].x-cajasuelo[i].x)*(cajasuelo[idCaja].x-cajasuelo[i].x)+(cajasuelo[idCaja].z-cajasuelo[i].z)*(cajasuelo[idCaja].z-cajasuelo[i].z)) < 1.5) && cajasuelo[idCaja].y == cajasuelo[i].y)
      cajasuelo[idCaja].y = cajasuelo[idCaja].y + 0.7;
  }
  
}  
*/
/**	 void clickRaton( int boton, int estado, int x, int y )

Procedimiento para gestionar los eventos de pulsacion de los botones del raton.

Argumentos:

boton: Codigo glut del boton que ha manipulado el usuario.

estado: Estado en el que esta el boton que se ha pulsado.

x,y: Posicion, en coordenadas de pantalla, en que se encuantra el cursor.

**/
/*
int ratonPulsado=0;  // Variable que nos indica si el botón del ratón está pulsado
int colorOriginal;
*/
 void clickRaton( int boton, int estadoBoton, int x, int y ){
	/*float xm,zm;
	
	if( boton == GLUT_LEFT_BUTTON && estadoBoton == GLUT_DOWN && estado == poniendoCajas ){
	
	  ratonPulsado = 1;
	  //Calculamos las coordenadas del mundo 
	  xm = (((float)x/anchoVentana-0.5)*ventanaMundoParalela)+origenXVentanaMundoParalelo;
	  zm = (((float)y/altoVentana-0.5)*ventanaMundoParalela)*altoVentana/anchoVentana-origenYVentanaMundoParalelo;

	  //Creamos la caja y la añadimos al vector
	  if( numCaj < NUMCAJAS ){
	    cajasuelo[numCaj].x = xm;
	    cajasuelo[numCaj].z = zm; 
	    numCaj++;
	    gluiPostRedisplay(); 	
	  }
	}
	else if( boton == GLUT_LEFT_BUTTON && estadoBoton == GLUT_DOWN && estado == PintandoCajas ){
		
	  cajaElegida = pick(x,y);
	  if(cajaElegida>-1){
	  cajasuelo[cajaElegida].color = colorActivo;
	  gluiPostRedisplay();
	  cajaElegida = -1;
	  } 
	}
	else if( boton == GLUT_LEFT_BUTTON && estadoBoton == GLUT_DOWN && estado == enganchando ){
	
	
	  if(colgado == -1){
		colgado = pick(x,y);
		if(!( (helic.t+helic.bloque_prin_ancho/2.0 > cajasuelo[colgado].x-1) && (helic.t+helic.bloque_prin_ancho/2.0 < cajasuelo[colgado].x+1) 
		  &&( (helic.altura - helic.long_cuerda + cajasuelo[colgado].y) < 0.3 ) && (helic.z > cajasuelo[colgado].z-1) &&  (helic.z < cajasuelo[colgado].z+1)) )
		    colgado=-1;
	  } //Primer If	
	} //else if
	else if	( boton == GLUT_LEFT_BUTTON && estadoBoton == GLUT_DOWN && estado == MoviendoCajas ){
	  cajaElegida = pick(x,y);
	  ratonPulsado = 1;
	  if(cajaElegida>-1){
	    raton.x=x;
	    raton.y=y;
	    glutSetCursor(GLUT_CURSOR_NONE);
	    colorOriginal = cajasuelo[cajaElegida].color;
	    cajasuelo[cajaElegida].color = colorSeleccion;
	  }   
	}
	else if ( boton == GLUT_LEFT_BUTTON && estadoBoton == GLUT_DOWN && estado == RotandoCajas ){
	  cajaElegida = pick(x,y);
	  ratonPulsado = 1;
	  if(cajaElegida>-1){
	    raton.x=x;
	    raton.y=y;
	    glutSetCursor(GLUT_CURSOR_NONE);
	    colorOriginal = cajasuelo[cajaElegida].color;
	    cajasuelo[cajaElegida].color = colorSeleccion;
	  } 
	}
	else{
	  ratonPulsado = 0;
	  if( cajaElegida > -1 && (estado == RotandoCajas || estado == MoviendoCajas)){
	    glutSetCursor(GLUT_CURSOR_LEFT_ARROW);
	    cajasuelo[cajaElegida].color = colorOriginal;
	  }
	} */
}


/**	void RatonMovido( int x, int y )

Procedimiento para gestionar los eventos de movimiento del raton.

Argumentos:

x,y: Posicion, en coordenadas de pantalla, en que se encuantra el cursor.

**/

void RatonMovido( int x, int y ){
  /*float xm,zm;

	if( ratonPulsado && numCaj < NUMCAJAS && estado == poniendoCajas){
	
	    //Calculamos las coordenadas del mundo 
	    xm = (((float)x/anchoVentana-0.5)*ventanaMundoParalela)+origenXVentanaMundoParalelo;
	    zm = (((float)y/altoVentana-0.5)*ventanaMundoParalela)*altoVentana/anchoVentana-origenYVentanaMundoParalelo;
	  
	    cajasuelo[numCaj-1].x = xm;
	    cajasuelo[numCaj-1].z = zm;
	    gluiPostRedisplay();	
  
	 }
	else if( ratonPulsado && estado == MoviendoCajas && cajaElegida > -1 ){
	    
	    cajasuelo[cajaElegida].x += 0.1*(x-raton.x);
	    cajasuelo[cajaElegida].z += 0.1*(y-raton.y);
	    colisiones(cajaElegida);
	    raton.x = x;
	    raton.y = y;
	    gluiPostRedisplay();
	   
	 }
	 else if( ratonPulsado && estado == RotandoCajas && cajaElegida > -1 ){
	    cajasuelo[cajaElegida].ang = atan2(-(y-raton.y),x-raton.x)*180.0/PI;
	    gluiPostRedisplay();  
	 }*/
	 
}
 
